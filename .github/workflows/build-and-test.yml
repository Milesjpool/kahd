name: Build and test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_ID: "kahd-001"
  PROJECT_NUMBER: "561203979895"
  SERVICE_ACCOUNT: "githubactions"
  IDENTITY_POOL: "kahd-ci-identity-pool"
  ENVIRONMENT: "europe-west2"
  SERVER_IMAGE: "kahd-api-server"
  IMAGE_REGISTRY: "docker-images"

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.23.1
    - name: Run unit tests
      run: make test-unit

  e2e-test:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Compose
      run: sudo apt-get update && sudo apt-get install -y docker-compose
    - name: Run end-to-end tests
      run: make test-e2e

  deploy:
    runs-on: ubuntu-latest
    needs: e2e-test
    permissions:
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: 'Google Cloud Authentication'
      id: google-auth
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        project_id: ${{ env.PROJECT_ID }}
        service_account: ${{ env.SERVICE_ACCOUNT }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
        workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.IDENTITY_POOL }}/providers/github-actions-provider

    - name: Docker Authentication
      id: docker-auth
      uses: 'docker/login-action@v1'
      with:
        username: 'oauth2accesstoken'
        password: '${{ steps.google-auth.outputs.access_token }}'
        registry: '${{ env.ENVIRONMENT }}-docker.pkg.dev'

    - name: Get build-tag
      id: get-tag
      run: echo ::set-output name=short_ref::$(git rev-parse --short "$GITHUB_SHA")

    - name: Push server image
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: |
            ${{ env.ENVIRONMENT }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_REGISTRY }}/${{ env.SERVER_IMAGE }}:latest
            ${{ env.ENVIRONMENT }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_REGISTRY }}/${{ env.SERVER_IMAGE }}:${{ steps.get-tag.outputs.short_ref }}